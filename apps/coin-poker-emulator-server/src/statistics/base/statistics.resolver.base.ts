/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Statistics } from "./Statistics";
import { StatisticsCountArgs } from "./StatisticsCountArgs";
import { StatisticsFindManyArgs } from "./StatisticsFindManyArgs";
import { StatisticsFindUniqueArgs } from "./StatisticsFindUniqueArgs";
import { CreateStatisticsArgs } from "./CreateStatisticsArgs";
import { UpdateStatisticsArgs } from "./UpdateStatisticsArgs";
import { DeleteStatisticsArgs } from "./DeleteStatisticsArgs";
import { Player } from "../../player/base/Player";
import { StatisticsService } from "../statistics.service";
@graphql.Resolver(() => Statistics)
export class StatisticsResolverBase {
  constructor(protected readonly service: StatisticsService) {}

  async _statisticsItemsMeta(
    @graphql.Args() args: StatisticsCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Statistics])
  async statisticsItems(
    @graphql.Args() args: StatisticsFindManyArgs
  ): Promise<Statistics[]> {
    return this.service.statisticsItems(args);
  }

  @graphql.Query(() => Statistics, { nullable: true })
  async statistics(
    @graphql.Args() args: StatisticsFindUniqueArgs
  ): Promise<Statistics | null> {
    const result = await this.service.statistics(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Statistics)
  async createStatistics(
    @graphql.Args() args: CreateStatisticsArgs
  ): Promise<Statistics> {
    return await this.service.createStatistics({
      ...args,
      data: {
        ...args.data,

        player: args.data.player
          ? {
              connect: args.data.player,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => Statistics)
  async updateStatistics(
    @graphql.Args() args: UpdateStatisticsArgs
  ): Promise<Statistics | null> {
    try {
      return await this.service.updateStatistics({
        ...args,
        data: {
          ...args.data,

          player: args.data.player
            ? {
                connect: args.data.player,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Statistics)
  async deleteStatistics(
    @graphql.Args() args: DeleteStatisticsArgs
  ): Promise<Statistics | null> {
    try {
      return await this.service.deleteStatistics(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => Player, {
    nullable: true,
    name: "player",
  })
  async getPlayer(
    @graphql.Parent() parent: Statistics
  ): Promise<Player | null> {
    const result = await this.service.getPlayer(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
