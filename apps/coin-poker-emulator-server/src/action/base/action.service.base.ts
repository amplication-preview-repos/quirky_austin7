/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Action as PrismaAction,
  Game as PrismaGame,
  Player as PrismaPlayer,
} from "@prisma/client";

export class ActionServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.ActionCountArgs, "select">): Promise<number> {
    return this.prisma.action.count(args);
  }

  async actions(args: Prisma.ActionFindManyArgs): Promise<PrismaAction[]> {
    return this.prisma.action.findMany(args);
  }
  async action(
    args: Prisma.ActionFindUniqueArgs
  ): Promise<PrismaAction | null> {
    return this.prisma.action.findUnique(args);
  }
  async createAction(args: Prisma.ActionCreateArgs): Promise<PrismaAction> {
    return this.prisma.action.create(args);
  }
  async updateAction(args: Prisma.ActionUpdateArgs): Promise<PrismaAction> {
    return this.prisma.action.update(args);
  }
  async deleteAction(args: Prisma.ActionDeleteArgs): Promise<PrismaAction> {
    return this.prisma.action.delete(args);
  }

  async getGame(parentId: string): Promise<PrismaGame | null> {
    return this.prisma.action
      .findUnique({
        where: { id: parentId },
      })
      .game();
  }

  async getPlayer(parentId: string): Promise<PrismaPlayer | null> {
    return this.prisma.action
      .findUnique({
        where: { id: parentId },
      })
      .player();
  }
}
